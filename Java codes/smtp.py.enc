#smtp server
import smtpd
import asyncore

class CustomSMTPServer(smtpd.SMTPServer):
    
    def process_message(self, peer, mailfrom, rcpttos, data):
        print 'Receiving message from:', peer
        print 'Message addressed from:', mailfrom
        print 'Message addressed to  :', rcpttos
        print 'Message length        :', len(data)
        return

server = CustomSMTPServer(('127.0.0.1', 1025), None)

asyncore.loop()

#smtp client

import smtplib
import email.utils
from email.mime.text import MIMEText

# Create the message
msg = MIMEText('This is the body of the message.')
msg['To'] = email.utils.formataddr(('Recipient', 'recipient@example.com'))
msg['From'] = email.utils.formataddr(('Author', 'author@example.com'))
msg['Subject'] = 'Simple test message'

server = smtplib.SMTP('127.0.0.1', 1025)
server.set_debuglevel(True) # show communication with the server
try:
    server.sendmail('author@example.com', ['recipient@example.com'], msg.as_string())
finally:
    server.quit()lator(e,fi):
    k=0
    d=0
    while True:
        if (1+(k*fi))%e == 0:
            d = (1+(k*fi))//e
            return d
        k+=1
    return 0


while True:
    primeNumber1 = int(input("Enter First Prime Number : "))
    if isPrime(primeNumber1):
        break
    print("Not A Prime Number")


while True:
    primeNumber2 = int(input("Enter The Second Prime Number : "))
    if isPrime(primeNumber2):
        break
    print("Not A Prime Number")


modulus = primeNumber1 * primeNumber2

totient = (primeNumber1 - 1) * (primeNumber2 - 1)

while True:
        publicKeyExponent = int(input("Enter The Public Key Exponent Of Your Message : "))
        if isCoprime(publicKeyExponent,totient):
            break
        print("Invalid Key!!!")


privateKeyExponent = dCalculator(publicKeyExponent,totient)


publicKey = (modulus,publicKeyExponent)
privateKey = (modulus,privateKeyExponent)
print("Public Key : ",publicKey)
print("Private Key : ",privateKey)




userInput = int(input("\nPlease Enter Your Desired Numerical Message : "))

encryptedmessage = encryptor(userInput,publicKey)
print("\nThe Encypted Message is  : "+str(encryptedmessage))

s.connect((host, port))
s.send(str.encode(encryptedmessage))
print("Client Sent Message : ",encryptedmessage)

s.close

Server side

import socket

s = socket.socket()
host = socket.gethostname()
port = 8080

s.bind((host,port))

s.listen(5)

def decryptor(encryptedMessage,privateKey):        #Function for decrypting the encryptedMessage
    originalMessage = pow(encryptedMessage,privateKey[1]) % privateKey[0]
    #logic for decrypting
    return originalMessage

while True:
    c,addr = s.accept()
    print("Got Connection From : ",addr)
    encryptedMessage = (c.recv(2048)).decode('utf-8')
    print("Server Received Message : ",encryptedMessage)

    mod = input("Enter Modulus")
    exp = input("Enter Private Exponent")
    originalMessage = decryptor(encryptedMessage, (mod, exp))
    print("\nThe Decrypted Message is : " + originalMessage)

    c.close()

s.close
